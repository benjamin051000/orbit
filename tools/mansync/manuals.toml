# ------------------------------------------------------------------------------
# new             
# ------------------------------------------------------------------------------
[new]
name = "new"
summary = "create a new ip"
synopsis = "orbit new [options] <path>"
description = """
This command will create a new ip at the target directory `<path>`. The command
assumes the path does not already exists. It will attempt to create a new 
directory at the destination with a manifest. 

If no name is supplied, then the ip's name defaults to the final path component
of the path argument. Use the name option to provide a custom name.

This command fails if the path already exists. See the `init` command for
initializing an already existing project into an ip.
"""

args."<path>" = "The new directory to make"

options."--name <name>" = "The ip name to create"

examples = """
orbit new gates
orbit new ./projects/dir7 --name adder
"""

help = """
Create a new orbit ip project.

Usage:
    orbit new [options] <path>

Args:
    <path>              the destination path to create ip project

Options:
    --name <name>       the ip name to create
    --ip                create an ip (default: true)
"""

# ------------------------------------------------------------------------------
# init      
# ------------------------------------------------------------------------------
[init]
name = "init"
summary = "initialize an ip from an existing project"
synopsis = "orbit init [options] [<path>]"
description = """
This command will initialize a new ip at the target directory `<path>`. If no path 
is supplied, then it defaults to the current working directory.

If no name is supplied, then the ip's name defaults to the final path component
of the path argument. Use the name option to provide a custom name.

This command fails if the path does not exist. See the `new` command for
creating an ip from a non-existing directory.
"""

options."<path>" = "The location to initialize an ip"
options."--name <name>" = "The name of the ip"
options."--force" = "Overwrite a manifest if one already exists"

examples = """
orbit init
orbit init ./projects/gates
orbit init --name hello_world
"""

help = """
Initialize a new ip from an existing project.

Usage:
    orbit init [options] [<path>]

Options:
    <path>          destination path to initialize (default: '.')
    --name <name>   the name of the ip
    --force         overwrite any existing manifest with a new one
"""

# ------------------------------------------------------------------------------   
# show           
# ------------------------------------------------------------------------------
[show]
name = "show"
summary = "print information about an ip"
synopsis = "orbit show [options] [<ip>]"
description = """
This command retrieves various pieces of information about a particular ip to
gain a better understanding of how to utilize the ip. By default, it displays
the ip's manifest, if and only if the ip is able to be located.

It will first attempt to return the information from a possible installation. If
one does not exist, then it searches the downloads location for the ip.

If `--units` is specified, then a list of the ip's HDL units are displayed.

If `--versions` is specified, then a list of the ip's already available versions
are displayed.

If no spec is provided for `<ip>`, then it will retrieve information based on the
current working ip, if exists.
"""

options."<ip>" = "The spec of the ip to query"
options."--versions" = "Display the list of possible versions"
options."--units" = "Display the list of HDL primary design units associated with this ip"

examples = """
orbit show --units
orbit show gates:1.0.0 --units
orbit show gates --versions
"""

help = """
Print information about an ip.

Usage:
    orbit show [options] [<ip>]

Options:  
    <ip>                        the spec of the ip to query       
    --versions                  display the list of possible versions
    --units                     display primary design units within an ip
"""

# ------------------------------------------------------------------------------
# read          
# ------------------------------------------------------------------------------
[read]
name = "read"
summary = "navigate hdl design unit source code"
synopsis = "orbit read [options] <unit>"
description = """
This command allows the user to navigate source code to gain a quicker
understanding of the available code. By default, it will display the code to the
console.

If no ip specification is provided through the `--ip` option, then it will
assume to search the current working ip, if it exists.

If `--file` is provided, then the source code will be written to a temporary
read-only file. Also providing '--location' in this context will append the
requested code segment's line and column number to the end of the generated
filepath.

The options `--start`, `--end`, and `--doc` all accept valid VHDL code to
search for in the identified source code file. The `--doc` option will find the
immediate single-line comments preceding the supplied code value.

The `read` command attempts to clean the temporary directory at every call to
it. To keep existing files alive while allowing new files to appear, use the
`--keep` flag.
"""

args."<unit>" = "Primary design unit identifier"

options."--ip <spec>" = "The ip specification to search in the catalog"
options."--file" = "Copy the source code to a temporary read-only file"
options."--location" = "Append the targeted code segment's line and column number to the resulting filepath "
options."--keep" = "Do not clean the temporary directory of existing files"
options."--limit <num>" = "Set a maximum number of lines to write"
options."--start <code>" = "Start the code navigation upon matching this VHDL segment"
options."--end <code>" = "Stop the code navigation upon matching this VHDL segment"
options."--doc <code>" = "Navigate to the preceding comments of this VHDL segment"

examples = """
orbit read and_gate --ip gates:1.0.0
orbit read math_pkg --ip math --doc "function clog2"
orbit read math_pkg --ip math --start "package math_pkg" --doc "function flog2p1" --location --file
"""

help = """
Inspect hdl design unit source code.

Usage:
    orbit read [options] <unit>

Args:
    <unit>                  primary design unit identifier

Options:            
    --ip <spec>             ip to reference the unit from
    --location              append the :line:col to the filepath
    --file                  display the path to the read-only source code
    --keep                  prevent previous files read from being deleted
    --limit <num>           set a maximum number of lines to print
    --start <code>          tokens to begin reading contents from file
    --end <code>            tokens to end reading contents from file
    --doc <code>            series of tokens to find immediate comments for
"""

# ------------------------------------------------------------------------------ 
# get      
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------     
# tree    
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------  
# plan, p      
# ------------------------------------------------------------------------------
[plan]
name = "plan"
summary = "generate a blueprint file"
synopsis = "orbit plan [options]"
description = """\
This command will set up the current ip for build processes. It will collect
all necessary files according to their defined fileset into the 
blueprint.tsv file.
  
By default, the top level unit and testbench are auto-detected according to
the current design heirarchy. If there is ambiguity, it will show the user
the possibilities.
  
The top level unit and top level testbench will be stored in a .env file to
be set during any following calls to the 'build' command. If a plugin was
specified, it will also be stored in the .env file to be recalled during the
building phase.
  
User-defined filesets are only collected along the current working ip's 
path. Specifying a plugin with `--plugin` will collect the filesets 
configured for that plugin.
  
During the planning phase, a lockfile is produced outlining the exact ip
dependencies required, how to get them, and how to verify them. The lockfile
should be checked into version control and not directly edited by the user.
  
If the current working ip's manifest's data matches its data stored in its
own lockfile, then Orbit will read from the lockfile to create the ip
dependency graph. To force Orbit to build the ip dependency graph from
scratch, use `--force`.
  
If only wishing to update the lockfile, using `--lock-only` will not require
a toplevel or testbench to be determined. The `--lock-only` flag can be
combined with `--force` to overwrite the lockfile regardless if it is
already in sync with the current working ip's manifest data."""

options."--top <unit>" = "The top level entity to explicitly define"
options."--bench <tb>" = "The top level testbench to explicitly define"
options."--plugin <alias>" = "A plugin to refer to gather its declared filesets"
options."--build-dir <dir>" = "The relative directory to place the blueprint.tsv file"
options."--fileset <key=glob>..." = "A glob-style pattern identified by a name to add into the blueprint"
options."--clean" = "Removes all files from the build directory before execution"
options."--list" = "Displays all available plugins and exit"
options."--force" = "Ignore reading the precomputed lock file"
options."--lock-only" = "Create the lock file and exit"
options."--all" = "Include all locally found HDL files"

examples = """\
orbit plan --top and_gate --fileset PIN-PLAN="*.board"
orbit plan --plugin vivado --clean --bench ram_tb
orbit plan --lock-only"""


# ------------------------------------------------------------------------------
# build, b       
# ------------------------------------------------------------------------------
[build]
name = "build"
summary = "execute a plugin/backend tool flow"
synopsis = "orbit build [options] [--] [args]..."
description = """\
This command will call a user-defined command or plugin. A plugin should
typically require a blueprint.tsv to be generated. The command also
should read the data from the blueprint, and then process that data
(synthesis, simulation, etc.).
  
If the previous plan command accepted a plugin option, then Orbit remembers
for future build commands. It will be the default plugin to use if no
`--plugin` or `--command` is entered for the given command.
  
The command invoked will be ran from the ip's root directory."""

options."--plugin <alias>" = "Plugin to execute"
options."--command <cmd>" = "Command to execute"
options."--list" = "View available plugins"
options."--build-dir <dir>" = "The relative directory to locate the blueprint.tsv file"
options."--verbose" = "Display the command being executed"
options."-- args..." = "Arguments to pass to the requested plugin"

examples = """\
orbit build --plugin xsim -- --waves
orbit build --command python -- ./tools/synth.py --part x70
orbit build --verbose"""

# ------------------------------------------------------------------------------
# launch          
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# search          
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# download        
# ------------------------------------------------------------------------------
[download]
name = "download"
summary = "fetch packages from the internet"
synopsis = "orbit download [options]"
description = """\
This command will get a package from the internet using the default protocol
or a user-defined protocol. It places the package in the path defined as
environment variable ORBIT_DOWNLOADS.

Downloads are vital to Orbit's management system as to avoid having to solely 
rely on accessing the internet to get IP. Downloads allow Orbit to quickly
repair broken installations and allow users to learn about IP before installing.

When using a custom protocol, Orbit expects the final fetched repository to
exist within a special directory called the queue. By default, the queue is set
to a temporary directory, but it can be overridden with `--queue <dir>`. After a 
protocol is executed, Orbit resumes the download process by trying to detect the 
target IP and then performing a compression algorithm on the path to store as a 
single file archive. This final archive is special and packed with additional 
bytes, which makes it unsuitable to easily unzip with existing compression 
tools.

A lockfile is required to exist in the current IP in order to download its 
dependencies.

Variable substitution is supported when specifying the "command" and "args"
fields for a protocol. Most notably, the queue is accessed as {{ orbit.queue }}.
See `orbit help protocols` for more information about available variables.

This action may automatically run during an install if the package is missing
from the downloads. See `orbit help install` for more details."""

options."--list" = "Print URLs and exit"
options."--missing" = "Filter only uninstalled packages (default: true)"
options."--all" = "Gather packages from all dependency types"
options."--queue <dir>" = "Set the destination directory for placing fetched repositories"
options."--verbose" = "Display the custom protocol being executed"
options."--force" = "Download selected packages regardless of status"

examples = """\
orbit download --missing --list
orbit download --all --force"""

# ------------------------------------------------------------------------------
# install         
# ------------------------------------------------------------------------------
[install]
name = "install"
summary = "store an immutable reference to an ip"
synopsis = "orbit install [options]"
description = """\
This command will get move an ip's project folder to the cache. By default,
the specified version is the 'latest' released version orbit can
identify.
  
An ip can be installed from multiple locations. A common method is to
reference the ip with its pkgid if it is already in your ip catalog with
`--ip`. Another method is to install by providing the remote git repository 
url to clone with `--git`. A third method is to provide the local filesystem
path to the ip with `--path`.
  
The version is the "snapshot" of the ip's state during that time of
development. Versions are recognized by Orbit as git tags following the 
semver specification (major.minor.patch).
  
Development versions ('dev') are not allowed to be installed to the cache
because they are considered mutable."""

options."--path <path>" = "Directory to install ip from to place in the cache"
options."--ip <name>" = "Ip to install from the queue into the cache"
options."--force" = "Install the ip regardless of the cache slot occupancy"
options."--all" = "Install all dependencies (including developmental)"

examples = """\
orbit install"
orbit install --path ./projects/ram --force 
orbit install --all"""

# ------------------------------------------------------------------------------
# env             
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# config          
# ------------------------------------------------------------------------------
[config]
name = "config"
summary = "modify configuration values"
synopsis = "orbit config [options]"
description = """\
This command will alter configuration entries in Orbit's settings file named 
`config.toml`. By default, it will modify the user's config located at
$ORBIT_HOME.
  
To access an entry (key/value pair), use dots (`.`) to delimit between 
intermediate table identifiers and the final key identifier.
  
The command modifies the document in three independent stages. The first stage
modifies the settings by iterating through all defined `--append` values. Then, 
it will insert all `--set` values. Lastly, it will remove all `--unset` entries."""

options."--global" = "Access the home configuration file"
options."--local" = "Access the current project's configuration file"
options."--append <key>=<value>..." = "Add a value to the key storing a list"
options."--set <key>=<value>..." = "Write the value at the key's entry"
options."--unset <key>..." = "Delete the key's entry"

examples = """\
orbit config --append include="~/.orbit/profiles/ks-tech"
orbit config --unset env.VIVADO_PATH --global"""

# ------------------------------------------------------------------------------
# uninstall      
# ------------------------------------------------------------------------------
